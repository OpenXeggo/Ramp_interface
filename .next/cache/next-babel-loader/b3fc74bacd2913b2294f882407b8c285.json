{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useState } from \"react\";\nimport { injected } from \"../connectors\";\nexport default function useEagerConnect() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      activate = _useWeb3React.activate,\n      active = _useWeb3React.active;\n\n  var _useState = useState(false),\n      tried = _useState[0],\n      setTried = _useState[1];\n\n  useEffect(function () {\n    injected.isAuthorized().then(function (isAuthorized) {\n      if (isAuthorized) {\n        activate(injected, undefined, true)[\"catch\"](function () {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(function () {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/home/ankit/xeggo/put/Ramp_interface/hooks/useEagerConnect.js"],"names":["useWeb3React","useEffect","useState","injected","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","undefined"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AAAA,sBACXJ,YAAY,EADD;AAAA,MAChCK,QADgC,iBAChCA,QADgC;AAAA,MACtBC,MADsB,iBACtBA,MADsB;;AAAA,kBAGdJ,QAAQ,CAAC,KAAD,CAHM;AAAA,MAGjCK,KAHiC;AAAA,MAG1BC,QAH0B;;AAKxCP,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,QAAQ,CAACM,YAAT,GAAwBC,IAAxB,CAA6B,UAACD,YAAD,EAAkB;AAC7C,UAAIA,YAAJ,EAAkB;AAChBJ,QAAAA,QAAQ,CAACF,QAAD,EAAWQ,SAAX,EAAsB,IAAtB,CAAR,UAA0C,YAAM;AAC9CH,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACLA,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KARD;AASD,GAVQ,EAUN,CAACH,QAAD,CAVM,CAAT,CALwC,CAiBxC;;AACAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACM,KAAD,IAAUD,MAAd,EAAsB;AACpBE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACD,KAAD,EAAQD,MAAR,CAJM,CAAT;AAMA,SAAOC,KAAP;AACD;;GAzBuBH,e;UACOJ,Y","sourcesContent":["import { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useState } from \"react\";\nimport { injected } from \"../connectors\";\n\nexport default function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]);\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n"]},"metadata":{},"sourceType":"module"}