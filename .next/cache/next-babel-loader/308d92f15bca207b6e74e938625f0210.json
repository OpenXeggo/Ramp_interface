{"ast":null,"code":"import { formatUnits } from \"@ethersproject/units\";\nexport const constants = {\n  COMPTROLLER_ADDRESS: \"0xcE589FC23EE7AB377e07c513e6b32e93ab57CF1B\",\n  ESCROW_ADDRESS: \"0x8eeC1CDc04feBceaF80543ab6887E2a7fdEB88CE\",\n  ESCROW_FACTORY_ADDRESS: \"0x8f83522DECe212fCcc0a124A14b59C1EaA07882F\"\n};\nexport function shortenHex(hex, length = 4) {\n  return `${hex.substring(0, length + 2)}…${hex.substring(hex.length - length)}`;\n}\nconst ETHERSCAN_PREFIXES = {\n  1: \"\",\n  3: \"ropsten.\",\n  4: \"rinkeby.\",\n  5: \"goerli.\",\n  42: \"kovan.\"\n};\nexport const INFURA_PREFIXES = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan'\n};\nexport const POKT_PREFIXES = {\n  1: 'eth-mainnet',\n  3: 'eth-ropsten',\n  4: 'eth-rinkeby',\n  5: 'eth-goerli',\n  42: 'poa-kovan'\n};\n/**\n *\n * @param {(\"Account\"|\"Transaction\")} type\n * @param {[number, string]} data\n */\n\nexport function formatEtherscanLink(type, data) {\n  switch (type) {\n    case \"Account\":\n      {\n        const [chainId, address] = data;\n        return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/address/${address}`;\n      }\n\n    case \"Transaction\":\n      {\n        const [chainId, hash] = data;\n        return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/tx/${hash}`;\n      }\n  }\n}\n/**\n * @name parseBalance\n *\n * @param {import(\"@ethersproject/bignumber\").BigNumberish} balance\n * @param {number} decimals\n * @param {number} decimalsToDisplay\n *\n * @returns {string}\n */\n\nexport const parseBalance = (balance, decimals = 18, decimalsToDisplay = 3) => Number(formatUnits(balance, decimals)).toFixed(decimalsToDisplay);","map":{"version":3,"sources":["/home/ankit/xeggo/put/Ramp_interface/util.ts"],"names":["formatUnits","constants","COMPTROLLER_ADDRESS","ESCROW_ADDRESS","ESCROW_FACTORY_ADDRESS","shortenHex","hex","length","substring","ETHERSCAN_PREFIXES","INFURA_PREFIXES","POKT_PREFIXES","formatEtherscanLink","type","data","chainId","address","hash","parseBalance","balance","decimals","decimalsToDisplay","Number","toFixed"],"mappings":"AAAA,SAASA,WAAT,QAAwC,sBAAxC;AAEA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,mBAAmB,EAAE,4CADE;AAEvBC,EAAAA,cAAc,EAAE,4CAFO;AAGvBC,EAAAA,sBAAsB,EAAE;AAHD,CAAlB;AAMP,OAAO,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,MAAM,GAAG,CAAlC,EAAqC;AAC1C,SAAQ,GAAED,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiBD,MAAM,GAAG,CAA1B,CAA6B,IAAGD,GAAG,CAACE,SAAJ,CACxCF,GAAG,CAACC,MAAJ,GAAaA,MAD2B,CAExC,EAFF;AAGD;AAED,MAAME,kBAAkB,GAAG;AACzB,KAAG,EADsB;AAEzB,KAAG,UAFsB;AAGzB,KAAG,UAHsB;AAIzB,KAAG,SAJsB;AAKzB,MAAI;AALqB,CAA3B;AAQA,OAAO,MAAMC,eAA0C,GAAG;AACxD,KAAG,SADqD;AAExD,KAAG,SAFqD;AAGxD,KAAG,SAHqD;AAIxD,KAAG,QAJqD;AAKxD,MAAI;AALoD,CAAnD;AAQP,OAAO,MAAMC,aAAwC,GAAG;AACtD,KAAG,aADmD;AAEtD,KAAG,aAFmD;AAGtD,KAAG,aAHmD;AAItD,KAAG,YAJmD;AAKtD,MAAI;AALkD,CAAjD;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AAC9C,UAAQD,IAAR;AACE,SAAK,SAAL;AAAgB;AACd,cAAM,CAACE,OAAD,EAAUC,OAAV,IAAqBF,IAA3B;AACA,eAAQ,WAAUL,kBAAkB,CAACM,OAAD,CAAU,wBAAuBC,OAAQ,EAA7E;AACD;;AACD,SAAK,aAAL;AAAoB;AAClB,cAAM,CAACD,OAAD,EAAUE,IAAV,IAAkBH,IAAxB;AACA,eAAQ,WAAUL,kBAAkB,CAACM,OAAD,CAAU,mBAAkBE,IAAK,EAArE;AACD;AARH;AAUD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,QAAQ,GAAG,EAArB,EAAyBC,iBAAiB,GAAG,CAA7C,KAC1BC,MAAM,CAACtB,WAAW,CAACmB,OAAD,EAAUC,QAAV,CAAZ,CAAN,CAAuCG,OAAvC,CAA+CF,iBAA/C,CADK","sourcesContent":["import { formatUnits, parseEther } from \"@ethersproject/units\";\n\nexport const constants = {\n  COMPTROLLER_ADDRESS: \"0xcE589FC23EE7AB377e07c513e6b32e93ab57CF1B\",\n  ESCROW_ADDRESS: \"0x8eeC1CDc04feBceaF80543ab6887E2a7fdEB88CE\",\n  ESCROW_FACTORY_ADDRESS: \"0x8f83522DECe212fCcc0a124A14b59C1EaA07882F\",\n}\n\nexport function shortenHex(hex, length = 4) {\n  return `${hex.substring(0, length + 2)}…${hex.substring(\n    hex.length - length,\n  )}`;\n}\n\nconst ETHERSCAN_PREFIXES = {\n  1: \"\",\n  3: \"ropsten.\",\n  4: \"rinkeby.\",\n  5: \"goerli.\",\n  42: \"kovan.\",\n};\n\nexport const INFURA_PREFIXES: { [key: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n}\n\nexport const POKT_PREFIXES: { [key: number]: string } = {\n  1: 'eth-mainnet',\n  3: 'eth-ropsten',\n  4: 'eth-rinkeby',\n  5: 'eth-goerli',\n  42: 'poa-kovan',\n}\n\n/**\n *\n * @param {(\"Account\"|\"Transaction\")} type\n * @param {[number, string]} data\n */\nexport function formatEtherscanLink(type, data) {\n  switch (type) {\n    case \"Account\": {\n      const [chainId, address] = data;\n      return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/address/${address}`;\n    }\n    case \"Transaction\": {\n      const [chainId, hash] = data;\n      return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/tx/${hash}`;\n    }\n  }\n}\n\n/**\n * @name parseBalance\n *\n * @param {import(\"@ethersproject/bignumber\").BigNumberish} balance\n * @param {number} decimals\n * @param {number} decimalsToDisplay\n *\n * @returns {string}\n */\nexport const parseBalance = (balance, decimals = 18, decimalsToDisplay = 3) =>\n  Number(formatUnits(balance, decimals)).toFixed(decimalsToDisplay);\n"]},"metadata":{},"sourceType":"module"}