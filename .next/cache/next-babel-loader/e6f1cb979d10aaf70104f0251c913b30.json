{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { formatUnits } from \"@ethersproject/units\";\nexport var constants = {\n  COMPTROLLER_ADDRESS: \"0xcE589FC23EE7AB377e07c513e6b32e93ab57CF1B\",\n  ESCROW_ADDRESS: \"0x8eeC1CDc04feBceaF80543ab6887E2a7fdEB88CE\",\n  ESCROW_FACTORY_ADDRESS: \"0x8f83522DECe212fCcc0a124A14b59C1EaA07882F\"\n};\nexport function shortenHex(hex) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return \"\".concat(hex.substring(0, length + 2), \"\\u2026\").concat(hex.substring(hex.length - length));\n}\nvar ETHERSCAN_PREFIXES = {\n  1: \"\",\n  3: \"ropsten.\",\n  4: \"rinkeby.\",\n  5: \"goerli.\",\n  42: \"kovan.\"\n};\nexport var INFURA_PREFIXES = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan'\n};\nexport var POKT_PREFIXES = {\n  1: 'eth-mainnet',\n  3: 'eth-ropsten',\n  4: 'eth-rinkeby',\n  5: 'eth-goerli',\n  42: 'poa-kovan'\n};\n/**\n *\n * @param {(\"Account\"|\"Transaction\")} type\n * @param {[number, string]} data\n */\n\nexport function formatEtherscanLink(type, data) {\n  switch (type) {\n    case \"Account\":\n      {\n        var _data = _slicedToArray(data, 2),\n            chainId = _data[0],\n            address = _data[1];\n\n        return \"https://\".concat(ETHERSCAN_PREFIXES[chainId], \"etherscan.io/address/\").concat(address);\n      }\n\n    case \"Transaction\":\n      {\n        var _data2 = _slicedToArray(data, 2),\n            _chainId = _data2[0],\n            hash = _data2[1];\n\n        return \"https://\".concat(ETHERSCAN_PREFIXES[_chainId], \"etherscan.io/tx/\").concat(hash);\n      }\n  }\n}\n/**\n * @name parseBalance\n *\n * @param {import(\"@ethersproject/bignumber\").BigNumberish} balance\n * @param {number} decimals\n * @param {number} decimalsToDisplay\n *\n * @returns {string}\n */\n\nexport var parseBalance = function parseBalance(balance) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  var decimalsToDisplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  return Number(formatUnits(balance, decimals)).toFixed(decimalsToDisplay);\n};","map":null,"metadata":{},"sourceType":"module"}