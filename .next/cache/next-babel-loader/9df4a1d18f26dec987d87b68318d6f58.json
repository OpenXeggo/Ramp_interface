{"ast":null,"code":"var _jsxFileName = \"/home/ankit/xeggo/put/Ramp_interface/components/Account.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport MetaMaskOnboarding from \"@metamask/onboarding\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { UserRejectedRequestError } from \"@web3-react/injected-connector\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { injected } from \"../connectors\";\nimport useENSName from \"../hooks/useENSName\";\nimport { formatEtherscanLink, shortenHex } from \"../util\";\n\nconst Account = ({\n  triedToEagerConnect\n}) => {\n  const {\n    active,\n    error,\n    activate,\n    chainId,\n    account,\n    setError\n  } = useWeb3React(); // initialize metamask onboarding\n\n  const onboarding = useRef();\n  useLayoutEffect(() => {\n    onboarding.current = new MetaMaskOnboarding();\n  }, []); // manage connecting state for injected connector\n\n  const {\n    0: connecting,\n    1: setConnecting\n  } = useState(false);\n  useEffect(() => {\n    if (active || error) {\n      var _onboarding$current;\n\n      setConnecting(false);\n      (_onboarding$current = onboarding.current) === null || _onboarding$current === void 0 ? void 0 : _onboarding$current.stopOnboarding();\n    }\n  }, [active, error]);\n  const ENSName = useENSName(account);\n\n  if (error) {\n    return null;\n  }\n\n  if (!triedToEagerConnect) {\n    return null;\n  }\n\n  if (typeof account !== \"string\") {\n    var _window, _window2;\n\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    const hasMetaMaskOrWeb3Available = MetaMaskOnboarding.isMetaMaskInstalled() || ((_window = window) === null || _window === void 0 ? void 0 : _window.ethereum) || ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.web3);\n    return __jsx(\"div\", {\n      className: \"btn-blue hover:bg-blue-700 no-underline px-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, hasMetaMaskOrWeb3Available ? __jsx(\"button\", {\n      onClick: () => {\n        setConnecting(true);\n        activate(injected, undefined, true).catch(error => {\n          // ignore the error if it's a user rejected request\n          if (error instanceof UserRejectedRequestError) {\n            setConnecting(false);\n          } else {\n            setError(error);\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, MetaMaskOnboarding.isMetaMaskInstalled() ? \"Connect to MetaMask\" : \"Connect to Wallet\") : __jsx(\"button\", {\n      onClick: () => {\n        var _onboarding$current2;\n\n        return (_onboarding$current2 = onboarding.current) === null || _onboarding$current2 === void 0 ? void 0 : _onboarding$current2.startOnboarding();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Install Metamask\"));\n  }\n\n  return __jsx(\"a\", _extends({\n    href: formatEtherscanLink(\"Account\", [chainId, account]),\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }), ENSName || `${shortenHex(account, 4)}`);\n};\n\nexport default Account;","map":{"version":3,"sources":["/home/ankit/xeggo/put/Ramp_interface/components/Account.tsx"],"names":["MetaMaskOnboarding","useWeb3React","UserRejectedRequestError","useEffect","useLayoutEffect","useRef","useState","injected","useENSName","formatEtherscanLink","shortenHex","Account","triedToEagerConnect","active","error","activate","chainId","account","setError","onboarding","current","connecting","setConnecting","stopOnboarding","ENSName","hasMetaMaskOrWeb3Available","isMetaMaskInstalled","window","ethereum","web3","undefined","catch","startOnboarding","href","target","rel"],"mappings":"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","sourcesContent":["import MetaMaskOnboarding from \"@metamask/onboarding\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { UserRejectedRequestError } from \"@web3-react/injected-connector\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { injected } from \"../connectors\";\nimport useENSName from \"../hooks/useENSName\";\nimport { formatEtherscanLink, shortenHex } from \"../util\";\n\nconst Account = ({ triedToEagerConnect }) => {\n  const {\n    active,\n    error,\n    activate,\n    chainId,\n    account,\n    setError,\n  } = useWeb3React();\n\n  // initialize metamask onboarding\n  const onboarding = useRef<MetaMaskOnboarding>();\n\n  useLayoutEffect(() => {\n    onboarding.current = new MetaMaskOnboarding();\n  }, []);\n\n  // manage connecting state for injected connector\n  const [connecting, setConnecting] = useState(false);\n  useEffect(() => {\n    if (active || error) {\n      setConnecting(false);\n      onboarding.current?.stopOnboarding();\n    }\n  }, [active, error]);\n\n  const ENSName = useENSName(account);\n\n  if (error) {\n    return null;\n  }\n\n  if (!triedToEagerConnect) {\n    return null;\n  }\n\n  if (typeof account !== \"string\") {\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    const hasMetaMaskOrWeb3Available =\n      MetaMaskOnboarding.isMetaMaskInstalled() ||\n      (window as any)?.ethereum ||\n      (window as any)?.web3;\n\n    return (\n      <div className=\"btn-blue hover:bg-blue-700 no-underline px-2\">\n        {hasMetaMaskOrWeb3Available ? (\n          <button\n            onClick={() => {\n              setConnecting(true);\n\n              activate(injected, undefined, true).catch((error) => {\n                // ignore the error if it's a user rejected request\n                if (error instanceof UserRejectedRequestError) {\n                  setConnecting(false);\n                } else {\n                  setError(error);\n                }\n              });\n            }}\n          >\n            {MetaMaskOnboarding.isMetaMaskInstalled()\n              ? \"Connect to MetaMask\"\n              : \"Connect to Wallet\"}\n          </button>\n        ) : (\n          <button onClick={() => onboarding.current?.startOnboarding()}>\n            Install Metamask\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <a\n      {...{\n        href: formatEtherscanLink(\"Account\", [chainId, account]),\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n      }}\n    >\n      {ENSName || `${shortenHex(account, 4)}`}\n    </a>\n  );\n};\n\nexport default Account;\n"]},"metadata":{},"sourceType":"module"}