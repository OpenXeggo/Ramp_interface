{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer, useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { formatEther } from \"@ethersproject/units\";\nimport Account from \"./Account\";\nimport useContract from \"../hooks/useContract\";\nimport useEtherContract from \"../hooks/useEtherContract\";\nimport useEagerConnect from \"../hooks/useEagerConnect\";\nimport { constants, formatEtherscanLink } from \"../util\";\nimport { EscrowFactory } from \"../abi/EscrowFactory\";\nimport EscrowContractFactory from \"../abi/EscrowContractFactory.json\";\nconst defaultFormData = {\n  paymentid: \"\",\n  amount: \"\"\n};\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return defaultFormData;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    [event.name]: event.value\n  });\n};\n\nexport default function Sell() {\n  const {\n    0: formData,\n    1: setFormData\n  } = useReducer(formReducer, defaultFormData);\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false);\n  const {\n    0: reverted,\n    1: setReverted\n  } = useState(false);\n  const {\n    0: escrows,\n    1: setEscrows\n  } = useState([]);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(\"\");\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(\"...\");\n  const {\n    library,\n    account,\n    active,\n    error,\n    chainId\n  } = useWeb3React();\n  const isConnected = typeof account === \"string\" && !!library;\n  const triedToEagerConnect = useEagerConnect();\n  const EscrowInstance = useEtherContract(EscrowFactory);\n  const escrowFactory = useContract(constants.ESCROW_FACTORY_ADDRESS, EscrowContractFactory, true);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setSubmitting(true);\n    setReverted(false);\n    await escrowFactory.newEscrow(formData.paymentid, {\n      value: parseEther(formData.amount)\n    }).then(res => {\n      setFormData({\n        reset: true\n      });\n    }).catch(e => {\n      if (e.code == -32016) setReverted(true);\n      console.error(e);\n    }).finally(() => setSubmitting(false));\n  };\n\n  const fetchEscrows = async () => {\n    let data = await escrowFactory.getEscrows(account);\n    setEscrows(data);\n    setSelected(data[0]);\n  };\n\n  const getBalance = async () => {\n    if (!selected) return;\n    if (!EscrowInstance) return;\n    let escrow = await EscrowInstance.attach(selected);\n    let bal = await escrow.getUnlockedBalance();\n    setBalance(formatEther(bal));\n  };\n\n  const withdraw = async () => {\n    if (!selected) return;\n    let escrow = await EscrowInstance.attach(selected);\n    let bal = await escrow.getUnlockedBalance();\n    await escrow.withdraw(bal, account);\n  };\n\n  const deposit = async () => {\n    if (!selected) return;\n    await library.getSigner(account).sendTransaction({\n      to: selected,\n      value: parseEther(\"0.1\")\n    });\n  };\n\n  const handleChange = event => {\n    setFormData({\n      name: event.target.name,\n      value: event.target.value\n    });\n  };\n\n  const handleSelect = async event => {\n    setSelected(event.target.value);\n  };\n\n  useEffect(() => {\n    if (isConnected) {\n      fetchEscrows();\n    }\n  }, [isConnected]);\n  useEffect(() => {\n    getBalance();\n  }, [selected]);\n  const escrowsList = escrows.length > 0 && escrows.map((item, i) => {\n    return __jsx(\"option\", {\n      key: i,\n      value: item\n    }, item);\n  }, this);\n  return __jsx(\"div\", {\n    className: \"bg-white shadow-md rounded-lg px-8 pt-6 pb-8 mb-4\"\n  }, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-xs mb-2\"\n  }, \"Deployed Escrows\"), __jsx(\"div\", {\n    className: \"flex\"\n  }, __jsx(\"div\", {\n    className: \"relative w-full\"\n  }, __jsx(\"select\", {\n    className: \"block appearance-none w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 pr-8 rounded shadow leading-tight focus:outline-none focus:shadow-outline\",\n    onChange: handleSelect,\n    value: selected\n  }, escrowsList), __jsx(\"div\", {\n    className: \"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\"\n  }, __jsx(\"svg\", {\n    className: \"fill-current h-4 w-4\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\"\n  }, __jsx(\"path\", {\n    d: \"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"\n  })))), __jsx(\"a\", {\n    href: formatEtherscanLink(\"Account\", [chainId, selected]),\n    target: \"_blank\",\n    className: \"py-2 px-1\"\n  }, __jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    className: \"h-5 w-5\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"currentColor\"\n  }, __jsx(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"2\",\n    d: \"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"\n  })))), __jsx(\"div\", {\n    className: \"text-sm my-2\"\n  }, \"Balance: \", balance, \" ETH\"), __jsx(\"div\", {\n    className: \"flex pt-1\"\n  }, __jsx(\"button\", {\n    onClick: withdraw,\n    className: \"btn-blue m-auto p-2 text-sm\"\n  }, \"Withdraw\"), __jsx(\"button\", {\n    onClick: deposit,\n    className: \"btn-blue m-auto p-2 text-sm\"\n  }, \"Deposit\"))), __jsx(\"hr\", null), __jsx(\"br\", null), __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-xs mb-2\"\n  }, \"Receive Payments at ID\"), __jsx(\"input\", {\n    className: \"appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:border-purple-500\",\n    name: \"paymentid\",\n    disabled: submitting,\n    type: \"text\",\n    minLength: 1,\n    maxLength: 79,\n    placeholder: \"name@upi\",\n    onChange: handleChange,\n    value: formData.paymentid\n  })), __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-xs mb-2\"\n  }, \"Amount to Sell\"), __jsx(\"input\", {\n    className: \"w-auto appearance-none border-2 border-gray-200 rounded py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:border-purple-500\",\n    name: \"amount\",\n    disabled: submitting,\n    inputMode: \"decimal\",\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\",\n    placeholder: \"0.0\",\n    onChange: handleChange,\n    value: formData.amount\n  }), __jsx(\"div\", {\n    className: \"w-auto inline-block p-2\"\n  }, \"ETH\")), reverted && __jsx(\"div\", {\n    className: \"w-full flex pt-4\"\n  }, \"Not enough funds in escrow...\"), __jsx(\"div\", {\n    className: \"w-full flex pt-4\"\n  }, isConnected ? __jsx(\"button\", {\n    type: \"submit\",\n    disabled: submitting,\n    className: \"btn-blue m-auto\"\n  }, \"Create Escrow\") : __jsx(\"div\", {\n    className: \"m-auto\"\n  }, __jsx(Account, {\n    triedToEagerConnect: triedToEagerConnect\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}