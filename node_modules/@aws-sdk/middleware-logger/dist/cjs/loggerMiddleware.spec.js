"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loggerMiddleware_1 = require("./loggerMiddleware");
describe("getLoggerPlugin", () => {
    const mockClientStack = {
        add: jest.fn(),
    };
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("adds loggerMiddleware", () => {
        loggerMiddleware_1.getLoggerPlugin({}).applyToStack(mockClientStack);
        expect(mockClientStack.add).toHaveBeenCalledTimes(1);
        expect(mockClientStack.add.mock.calls[0][1]).toEqual(loggerMiddleware_1.loggerMiddlewareOptions);
    });
});
describe("loggerMiddleware", () => {
    const mockNext = jest.fn();
    const mockArgs = {
        input: {
            inputKey: "inputValue",
        },
        request: {
            method: "GET",
            headers: {},
        },
    };
    const mockResponse = {
        output: {
            $metadata: {
                statusCode: 200,
                requestId: "requestId",
            },
            outputKey: "outputValue",
        },
    };
    beforeEach(() => {
        mockNext.mockResolvedValueOnce(mockResponse);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("returns without logging if context.logger is not defined", async () => {
        const response = await loggerMiddleware_1.loggerMiddleware()(mockNext, {})(mockArgs);
        expect(mockNext).toHaveBeenCalledTimes(1);
        expect(response).toStrictEqual(mockResponse);
    });
    it("returns without logging if context.logger doesn't have info function", async () => {
        const logger = {};
        const response = await loggerMiddleware_1.loggerMiddleware()(mockNext, { logger })(mockArgs);
        expect(mockNext).toHaveBeenCalledTimes(1);
        expect(response).toStrictEqual(mockResponse);
    });
    it("logs $metadata if context.logger has info function", async () => {
        const logger = { info: jest.fn() };
        const context = {
            logger,
        };
        const response = await loggerMiddleware_1.loggerMiddleware()(mockNext, context)(mockArgs);
        expect(mockNext).toHaveBeenCalledTimes(1);
        expect(response).toStrictEqual(mockResponse);
        expect(logger.info).toHaveBeenCalledTimes(1);
        const { output: { $metadata }, } = mockResponse;
        expect(logger.info).toHaveBeenCalledWith({
            $metadata,
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyTWlkZGxld2FyZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlck1pZGRsZXdhcmUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHlEQUFnRztBQUVoRyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLE1BQU0sZUFBZSxHQUFHO1FBQ3RCLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ2YsQ0FBQztJQUVGLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQy9CLGtDQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFFLGVBQXdELENBQUMsQ0FBQztRQUM1RixNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMENBQXVCLENBQUMsQ0FBQztJQUNoRixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFFM0IsTUFBTSxRQUFRLEdBQUc7UUFDZixLQUFLLEVBQUU7WUFDTCxRQUFRLEVBQUUsWUFBWTtTQUN2QjtRQUNELE9BQU8sRUFBRTtZQUNQLE1BQU0sRUFBRSxLQUFLO1lBQ2IsT0FBTyxFQUFFLEVBQUU7U0FDWjtLQUNGLENBQUM7SUFFRixNQUFNLFlBQVksR0FBRztRQUNuQixNQUFNLEVBQUU7WUFDTixTQUFTLEVBQUU7Z0JBQ1QsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsU0FBUyxFQUFFLFdBQVc7YUFDdkI7WUFDRCxTQUFTLEVBQUUsYUFBYTtTQUN6QjtLQUNGLENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsUUFBUSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwREFBMEQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN4RSxNQUFNLFFBQVEsR0FBRyxNQUFNLG1DQUFnQixFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3BGLE1BQU0sTUFBTSxHQUFHLEVBQVksQ0FBQztRQUM1QixNQUFNLFFBQVEsR0FBRyxNQUFNLG1DQUFnQixFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsRSxNQUFNLE1BQU0sR0FBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQXdCLENBQUM7UUFFMUQsTUFBTSxPQUFPLEdBQUc7WUFDZCxNQUFNO1NBQ1AsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sbUNBQWdCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU3QyxNQUFNLEVBQ0osTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQ3RCLEdBQUcsWUFBWSxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUM7WUFDdkMsU0FBUztTQUNWLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dnZXIsIE1pZGRsZXdhcmVTdGFjayB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBnZXRMb2dnZXJQbHVnaW4sIGxvZ2dlck1pZGRsZXdhcmUsIGxvZ2dlck1pZGRsZXdhcmVPcHRpb25zIH0gZnJvbSBcIi4vbG9nZ2VyTWlkZGxld2FyZVwiO1xuXG5kZXNjcmliZShcImdldExvZ2dlclBsdWdpblwiLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tDbGllbnRTdGFjayA9IHtcbiAgICBhZGQ6IGplc3QuZm4oKSxcbiAgfTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdChcImFkZHMgbG9nZ2VyTWlkZGxld2FyZVwiLCAoKSA9PiB7XG4gICAgZ2V0TG9nZ2VyUGx1Z2luKHt9KS5hcHBseVRvU3RhY2soKG1vY2tDbGllbnRTdGFjayBhcyB1bmtub3duKSBhcyBNaWRkbGV3YXJlU3RhY2s8YW55LCBhbnk+KTtcbiAgICBleHBlY3QobW9ja0NsaWVudFN0YWNrLmFkZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChtb2NrQ2xpZW50U3RhY2suYWRkLm1vY2suY2FsbHNbMF1bMV0pLnRvRXF1YWwobG9nZ2VyTWlkZGxld2FyZU9wdGlvbnMpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZShcImxvZ2dlck1pZGRsZXdhcmVcIiwgKCkgPT4ge1xuICBjb25zdCBtb2NrTmV4dCA9IGplc3QuZm4oKTtcblxuICBjb25zdCBtb2NrQXJncyA9IHtcbiAgICBpbnB1dDoge1xuICAgICAgaW5wdXRLZXk6IFwiaW5wdXRWYWx1ZVwiLFxuICAgIH0sXG4gICAgcmVxdWVzdDoge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczoge30sXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgb3V0cHV0OiB7XG4gICAgICAkbWV0YWRhdGE6IHtcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICByZXF1ZXN0SWQ6IFwicmVxdWVzdElkXCIsXG4gICAgICB9LFxuICAgICAgb3V0cHV0S2V5OiBcIm91dHB1dFZhbHVlXCIsXG4gICAgfSxcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrTmV4dC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1Jlc3BvbnNlKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoXCJyZXR1cm5zIHdpdGhvdXQgbG9nZ2luZyBpZiBjb250ZXh0LmxvZ2dlciBpcyBub3QgZGVmaW5lZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBsb2dnZXJNaWRkbGV3YXJlKCkobW9ja05leHQsIHt9KShtb2NrQXJncyk7XG4gICAgZXhwZWN0KG1vY2tOZXh0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b1N0cmljdEVxdWFsKG1vY2tSZXNwb25zZSk7XG4gIH0pO1xuXG4gIGl0KFwicmV0dXJucyB3aXRob3V0IGxvZ2dpbmcgaWYgY29udGV4dC5sb2dnZXIgZG9lc24ndCBoYXZlIGluZm8gZnVuY3Rpb25cIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxvZ2dlciA9IHt9IGFzIExvZ2dlcjtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGxvZ2dlck1pZGRsZXdhcmUoKShtb2NrTmV4dCwgeyBsb2dnZXIgfSkobW9ja0FyZ3MpO1xuICAgIGV4cGVjdChtb2NrTmV4dCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChyZXNwb25zZSkudG9TdHJpY3RFcXVhbChtb2NrUmVzcG9uc2UpO1xuICB9KTtcblxuICBpdChcImxvZ3MgJG1ldGFkYXRhIGlmIGNvbnRleHQubG9nZ2VyIGhhcyBpbmZvIGZ1bmN0aW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSAoeyBpbmZvOiBqZXN0LmZuKCkgfSBhcyB1bmtub3duKSBhcyBMb2dnZXI7XG5cbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgbG9nZ2VyLFxuICAgIH07XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGxvZ2dlck1pZGRsZXdhcmUoKShtb2NrTmV4dCwgY29udGV4dCkobW9ja0FyZ3MpO1xuICAgIGV4cGVjdChtb2NrTmV4dCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChyZXNwb25zZSkudG9TdHJpY3RFcXVhbChtb2NrUmVzcG9uc2UpO1xuXG4gICAgZXhwZWN0KGxvZ2dlci5pbmZvKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICBjb25zdCB7XG4gICAgICBvdXRwdXQ6IHsgJG1ldGFkYXRhIH0sXG4gICAgfSA9IG1vY2tSZXNwb25zZTtcbiAgICBleHBlY3QobG9nZ2VyLmluZm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICRtZXRhZGF0YSxcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==