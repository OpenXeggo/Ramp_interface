import { __awaiter, __generator } from "tslib";
import { getLoggerPlugin, loggerMiddleware, loggerMiddlewareOptions } from "./loggerMiddleware";
describe("getLoggerPlugin", function () {
    var mockClientStack = {
        add: jest.fn(),
    };
    afterEach(function () {
        jest.clearAllMocks();
    });
    it("adds loggerMiddleware", function () {
        getLoggerPlugin({}).applyToStack(mockClientStack);
        expect(mockClientStack.add).toHaveBeenCalledTimes(1);
        expect(mockClientStack.add.mock.calls[0][1]).toEqual(loggerMiddlewareOptions);
    });
});
describe("loggerMiddleware", function () {
    var mockNext = jest.fn();
    var mockArgs = {
        input: {
            inputKey: "inputValue",
        },
        request: {
            method: "GET",
            headers: {},
        },
    };
    var mockResponse = {
        output: {
            $metadata: {
                statusCode: 200,
                requestId: "requestId",
            },
            outputKey: "outputValue",
        },
    };
    beforeEach(function () {
        mockNext.mockResolvedValueOnce(mockResponse);
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    it("returns without logging if context.logger is not defined", function () { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loggerMiddleware()(mockNext, {})(mockArgs)];
                case 1:
                    response = _a.sent();
                    expect(mockNext).toHaveBeenCalledTimes(1);
                    expect(response).toStrictEqual(mockResponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it("returns without logging if context.logger doesn't have info function", function () { return __awaiter(void 0, void 0, void 0, function () {
        var logger, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    logger = {};
                    return [4 /*yield*/, loggerMiddleware()(mockNext, { logger: logger })(mockArgs)];
                case 1:
                    response = _a.sent();
                    expect(mockNext).toHaveBeenCalledTimes(1);
                    expect(response).toStrictEqual(mockResponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it("logs $metadata if context.logger has info function", function () { return __awaiter(void 0, void 0, void 0, function () {
        var logger, context, response, $metadata;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    logger = { info: jest.fn() };
                    context = {
                        logger: logger,
                    };
                    return [4 /*yield*/, loggerMiddleware()(mockNext, context)(mockArgs)];
                case 1:
                    response = _a.sent();
                    expect(mockNext).toHaveBeenCalledTimes(1);
                    expect(response).toStrictEqual(mockResponse);
                    expect(logger.info).toHaveBeenCalledTimes(1);
                    $metadata = mockResponse.output.$metadata;
                    expect(logger.info).toHaveBeenCalledWith({
                        $metadata: $metadata,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyTWlkZGxld2FyZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlck1pZGRsZXdhcmUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWhHLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtJQUMxQixJQUFNLGVBQWUsR0FBRztRQUN0QixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNmLENBQUM7SUFFRixTQUFTLENBQUM7UUFDUixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUJBQXVCLEVBQUU7UUFDMUIsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBRSxlQUF3RCxDQUFDLENBQUM7UUFDNUYsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDaEYsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxrQkFBa0IsRUFBRTtJQUMzQixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFFM0IsSUFBTSxRQUFRLEdBQUc7UUFDZixLQUFLLEVBQUU7WUFDTCxRQUFRLEVBQUUsWUFBWTtTQUN2QjtRQUNELE9BQU8sRUFBRTtZQUNQLE1BQU0sRUFBRSxLQUFLO1lBQ2IsT0FBTyxFQUFFLEVBQUU7U0FDWjtLQUNGLENBQUM7SUFFRixJQUFNLFlBQVksR0FBRztRQUNuQixNQUFNLEVBQUU7WUFDTixTQUFTLEVBQUU7Z0JBQ1QsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsU0FBUyxFQUFFLFdBQVc7YUFDdkI7WUFDRCxTQUFTLEVBQUUsYUFBYTtTQUN6QjtLQUNGLENBQUM7SUFFRixVQUFVLENBQUM7UUFDVCxRQUFRLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUM7UUFDUixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMERBQTBELEVBQUU7Ozs7d0JBQzVDLHFCQUFNLGdCQUFnQixFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFBOztvQkFBM0QsUUFBUSxHQUFHLFNBQWdEO29CQUNqRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7U0FDOUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNFQUFzRSxFQUFFOzs7OztvQkFDbkUsTUFBTSxHQUFHLEVBQVksQ0FBQztvQkFDWCxxQkFBTSxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBQTs7b0JBQW5FLFFBQVEsR0FBRyxTQUF3RDtvQkFDekUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDOzs7O1NBQzlDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRTs7Ozs7b0JBQ2pELE1BQU0sR0FBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQXdCLENBQUM7b0JBRXBELE9BQU8sR0FBRzt3QkFDZCxNQUFNLFFBQUE7cUJBQ1AsQ0FBQztvQkFFZSxxQkFBTSxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBQTs7b0JBQWhFLFFBQVEsR0FBRyxTQUFxRDtvQkFDdEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUU3QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUdqQyxTQUFTLEdBQ2pCLFlBQVksaUJBREssQ0FDSjtvQkFDakIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQzt3QkFDdkMsU0FBUyxXQUFBO3FCQUNWLENBQUMsQ0FBQzs7OztTQUNKLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nZ2VyLCBNaWRkbGV3YXJlU3RhY2sgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgZ2V0TG9nZ2VyUGx1Z2luLCBsb2dnZXJNaWRkbGV3YXJlLCBsb2dnZXJNaWRkbGV3YXJlT3B0aW9ucyB9IGZyb20gXCIuL2xvZ2dlck1pZGRsZXdhcmVcIjtcblxuZGVzY3JpYmUoXCJnZXRMb2dnZXJQbHVnaW5cIiwgKCkgPT4ge1xuICBjb25zdCBtb2NrQ2xpZW50U3RhY2sgPSB7XG4gICAgYWRkOiBqZXN0LmZuKCksXG4gIH07XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoXCJhZGRzIGxvZ2dlck1pZGRsZXdhcmVcIiwgKCkgPT4ge1xuICAgIGdldExvZ2dlclBsdWdpbih7fSkuYXBwbHlUb1N0YWNrKChtb2NrQ2xpZW50U3RhY2sgYXMgdW5rbm93bikgYXMgTWlkZGxld2FyZVN0YWNrPGFueSwgYW55Pik7XG4gICAgZXhwZWN0KG1vY2tDbGllbnRTdGFjay5hZGQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QobW9ja0NsaWVudFN0YWNrLmFkZC5tb2NrLmNhbGxzWzBdWzFdKS50b0VxdWFsKGxvZ2dlck1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoXCJsb2dnZXJNaWRkbGV3YXJlXCIsICgpID0+IHtcbiAgY29uc3QgbW9ja05leHQgPSBqZXN0LmZuKCk7XG5cbiAgY29uc3QgbW9ja0FyZ3MgPSB7XG4gICAgaW5wdXQ6IHtcbiAgICAgIGlucHV0S2V5OiBcImlucHV0VmFsdWVcIixcbiAgICB9LFxuICAgIHJlcXVlc3Q6IHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgIG91dHB1dDoge1xuICAgICAgJG1ldGFkYXRhOiB7XG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgcmVxdWVzdElkOiBcInJlcXVlc3RJZFwiLFxuICAgICAgfSxcbiAgICAgIG91dHB1dEtleTogXCJvdXRwdXRWYWx1ZVwiLFxuICAgIH0sXG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja05leHQubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tSZXNwb25zZSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KFwicmV0dXJucyB3aXRob3V0IGxvZ2dpbmcgaWYgY29udGV4dC5sb2dnZXIgaXMgbm90IGRlZmluZWRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbG9nZ2VyTWlkZGxld2FyZSgpKG1vY2tOZXh0LCB7fSkobW9ja0FyZ3MpO1xuICAgIGV4cGVjdChtb2NrTmV4dCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChyZXNwb25zZSkudG9TdHJpY3RFcXVhbChtb2NrUmVzcG9uc2UpO1xuICB9KTtcblxuICBpdChcInJldHVybnMgd2l0aG91dCBsb2dnaW5nIGlmIGNvbnRleHQubG9nZ2VyIGRvZXNuJ3QgaGF2ZSBpbmZvIGZ1bmN0aW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBsb2dnZXIgPSB7fSBhcyBMb2dnZXI7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBsb2dnZXJNaWRkbGV3YXJlKCkobW9ja05leHQsIHsgbG9nZ2VyIH0pKG1vY2tBcmdzKTtcbiAgICBleHBlY3QobW9ja05leHQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvU3RyaWN0RXF1YWwobW9ja1Jlc3BvbnNlKTtcbiAgfSk7XG5cbiAgaXQoXCJsb2dzICRtZXRhZGF0YSBpZiBjb250ZXh0LmxvZ2dlciBoYXMgaW5mbyBmdW5jdGlvblwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gKHsgaW5mbzogamVzdC5mbigpIH0gYXMgdW5rbm93bikgYXMgTG9nZ2VyO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIGxvZ2dlcixcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBsb2dnZXJNaWRkbGV3YXJlKCkobW9ja05leHQsIGNvbnRleHQpKG1vY2tBcmdzKTtcbiAgICBleHBlY3QobW9ja05leHQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvU3RyaWN0RXF1YWwobW9ja1Jlc3BvbnNlKTtcblxuICAgIGV4cGVjdChsb2dnZXIuaW5mbykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgY29uc3Qge1xuICAgICAgb3V0cHV0OiB7ICRtZXRhZGF0YSB9LFxuICAgIH0gPSBtb2NrUmVzcG9uc2U7XG4gICAgZXhwZWN0KGxvZ2dlci5pbmZvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAkbWV0YWRhdGEsXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=