/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface EscrowInterface extends ethers.utils.Interface {
  functions: {
    "comptroller()": FunctionFragment;
    "expectResponseFor(address,bytes32,address,uint256)": FunctionFragment;
    "feeThousandthsPercent()": FunctionFragment;
    "fulfillFiatPayment(bytes32,bool)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getUnlockedBalance()": FunctionFragment;
    "initialize(address,address,string)": FunctionFragment;
    "minFeeAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentid()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectResponseFor",
    values: [string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeThousandthsPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillFiatPayment",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paymentid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectResponseFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeThousandthsPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillFiatPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paymentid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AmountLocked(address,uint256)": EventFragment;
    "AmountUnlocked(address,uint256)": EventFragment;
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmountUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
}

export class Escrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EscrowInterface;

  functions: {
    comptroller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "comptroller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    expectResponseFor(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "expectResponseFor(address,bytes32,address,uint256)"(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeThousandthsPercent(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "feeThousandthsPercent()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    fulfillFiatPayment(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fulfillFiatPayment(bytes32,bool)"(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBalance(
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "getBalance()"(
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    getUnlockedBalance(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUnlockedBalance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "initialize(address,address,string)"(
      _owner: string,
      _comptroller: string,
      _paymentid: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint16,uint256)"(
      _feeThousandthsPercent: BigNumberish,
      _minFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minFeeAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minFeeAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paymentid(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "paymentid()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdraw(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  comptroller(overrides?: CallOverrides): Promise<string>;

  "comptroller()"(overrides?: CallOverrides): Promise<string>;

  expectResponseFor(
    _oracle: string,
    _requestId: BytesLike,
    _buyer: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "expectResponseFor(address,bytes32,address,uint256)"(
    _oracle: string,
    _requestId: BytesLike,
    _buyer: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeThousandthsPercent(overrides?: CallOverrides): Promise<number>;

  "feeThousandthsPercent()"(overrides?: CallOverrides): Promise<number>;

  fulfillFiatPayment(
    _requestId: BytesLike,
    successful: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fulfillFiatPayment(bytes32,bool)"(
    _requestId: BytesLike,
    successful: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUnlockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getUnlockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  "initialize(address,address,string)"(
    _owner: string,
    _comptroller: string,
    _paymentid: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint16,uint256)"(
    _feeThousandthsPercent: BigNumberish,
    _minFeeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minFeeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paymentid(overrides?: CallOverrides): Promise<string>;

  "paymentid()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    comptroller(overrides?: CallOverrides): Promise<string>;

    "comptroller()"(overrides?: CallOverrides): Promise<string>;

    expectResponseFor(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "expectResponseFor(address,bytes32,address,uint256)"(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeThousandthsPercent(overrides?: CallOverrides): Promise<number>;

    "feeThousandthsPercent()"(overrides?: CallOverrides): Promise<number>;

    fulfillFiatPayment(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "fulfillFiatPayment(bytes32,bool)"(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUnlockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address,address,string)"(
      _owner: string,
      _comptroller: string,
      _paymentid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint16,uint256)"(
      _feeThousandthsPercent: BigNumberish,
      _minFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minFeeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paymentid(overrides?: CallOverrides): Promise<string>;

    "paymentid()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AmountLocked(seller: string | null, amount: null): EventFilter;

    AmountUnlocked(seller: string | null, amount: null): EventFilter;

    ChainlinkCancelled(id: BytesLike | null): EventFilter;

    ChainlinkFulfilled(id: BytesLike | null): EventFilter;

    ChainlinkRequested(id: BytesLike | null): EventFilter;
  };

  estimateGas: {
    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    "comptroller()"(overrides?: CallOverrides): Promise<BigNumber>;

    expectResponseFor(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "expectResponseFor(address,bytes32,address,uint256)"(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeThousandthsPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "feeThousandthsPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillFiatPayment(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fulfillFiatPayment(bytes32,bool)"(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUnlockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address,address,string)"(
      _owner: string,
      _comptroller: string,
      _paymentid: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint16,uint256)"(
      _feeThousandthsPercent: BigNumberish,
      _minFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minFeeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentid(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentid()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "comptroller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expectResponseFor(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "expectResponseFor(address,bytes32,address,uint256)"(
      _oracle: string,
      _requestId: BytesLike,
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeThousandthsPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeThousandthsPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillFiatPayment(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fulfillFiatPayment(bytes32,bool)"(
      _requestId: BytesLike,
      successful: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnlockedBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnlockedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,string)"(
      _owner: string,
      _comptroller: string,
      _paymentid: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint16,uint256)"(
      _feeThousandthsPercent: BigNumberish,
      _minFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minFeeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minFeeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
